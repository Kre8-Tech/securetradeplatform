{"ast":null,"code":"var _s = $RefreshSig$();\n// frontend/src/components/useDashboardData.js\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst useDashboardData = () => {\n  _s();\n  const [userActivity, setUserActivity] = useState([]);\n  const [transactions, setTransactions] = useState([]);\n  const [whatsNew, setWhatsNew] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const token = localStorage.getItem('token');\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch user activity\n        const activityResponse = await axios.get('http://localhost:5000/api/user/activity', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setUserActivity(activityResponse.data);\n\n        // Fetch transactions\n        const transactionsResponse = await axios.get('http://localhost:5000/api/transactions', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setTransactions(transactionsResponse.data);\n\n        // Fetch announcements (what's new)\n        const whatsNewResponse = await axios.get('http://localhost:5000/api/whats-new', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setWhatsNew(whatsNewResponse.data);\n      } catch (err) {\n        console.error('Error fetching dashboard data:', err);\n        setError('Failed to fetch dashboard data. Please check your network connection and try again.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (token) {\n      fetchData();\n    } else {\n      setError('You must log in first.');\n      setLoading(false);\n    }\n  }, [token]);\n  return {\n    userActivity,\n    transactions,\n    whatsNew,\n    loading,\n    error\n  };\n};\n_s(useDashboardData, \"3ewUZxl2W1BNLPSazyBi1r/Ik2g=\");\nexport default useDashboardData;","map":{"version":3,"names":["useState","useEffect","axios","useDashboardData","_s","userActivity","setUserActivity","transactions","setTransactions","whatsNew","setWhatsNew","loading","setLoading","error","setError","token","localStorage","getItem","fetchData","activityResponse","get","headers","Authorization","data","transactionsResponse","whatsNewResponse","err","console"],"sources":["C:/securetradeplatform/frontend/src/components/useDashboardData.js"],"sourcesContent":["// frontend/src/components/useDashboardData.js\r\nimport { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst useDashboardData = () => {\r\n  const [userActivity, setUserActivity] = useState([]);\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [whatsNew, setWhatsNew] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const token = localStorage.getItem('token');\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // Fetch user activity\r\n        const activityResponse = await axios.get('http://localhost:5000/api/user/activity', {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n        setUserActivity(activityResponse.data);\r\n\r\n        // Fetch transactions\r\n        const transactionsResponse = await axios.get('http://localhost:5000/api/transactions', {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n        setTransactions(transactionsResponse.data);\r\n\r\n        // Fetch announcements (what's new)\r\n        const whatsNewResponse = await axios.get('http://localhost:5000/api/whats-new', {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n        setWhatsNew(whatsNewResponse.data);\r\n      } catch (err) {\r\n        console.error('Error fetching dashboard data:', err);\r\n        setError('Failed to fetch dashboard data. Please check your network connection and try again.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (token) {\r\n      fetchData();\r\n    } else {\r\n      setError('You must log in first.');\r\n      setLoading(false);\r\n    }\r\n  }, [token]);\r\n\r\n  return { userActivity, transactions, whatsNew, loading, error };\r\n};\r\n\r\nexport default useDashboardData;"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACO,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMe,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3ChB,SAAS,CAAC,MAAM;IACd,MAAMiB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,MAAMC,gBAAgB,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAC,yCAAyC,EAAE;UAClFC,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAUP,KAAK;UAAG;QAC9C,CAAC,CAAC;QACFT,eAAe,CAACa,gBAAgB,CAACI,IAAI,CAAC;;QAEtC;QACA,MAAMC,oBAAoB,GAAG,MAAMtB,KAAK,CAACkB,GAAG,CAAC,wCAAwC,EAAE;UACrFC,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAUP,KAAK;UAAG;QAC9C,CAAC,CAAC;QACFP,eAAe,CAACgB,oBAAoB,CAACD,IAAI,CAAC;;QAE1C;QACA,MAAME,gBAAgB,GAAG,MAAMvB,KAAK,CAACkB,GAAG,CAAC,qCAAqC,EAAE;UAC9EC,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAUP,KAAK;UAAG;QAC9C,CAAC,CAAC;QACFL,WAAW,CAACe,gBAAgB,CAACF,IAAI,CAAC;MACpC,CAAC,CAAC,OAAOG,GAAG,EAAE;QACZC,OAAO,CAACd,KAAK,CAAC,gCAAgC,EAAEa,GAAG,CAAC;QACpDZ,QAAQ,CAAC,qFAAqF,CAAC;MACjG,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAED,IAAIG,KAAK,EAAE;MACTG,SAAS,CAAC,CAAC;IACb,CAAC,MAAM;MACLJ,QAAQ,CAAC,wBAAwB,CAAC;MAClCF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACG,KAAK,CAAC,CAAC;EAEX,OAAO;IAAEV,YAAY;IAAEE,YAAY;IAAEE,QAAQ;IAAEE,OAAO;IAAEE;EAAM,CAAC;AACjE,CAAC;AAACT,EAAA,CA7CID,gBAAgB;AA+CtB,eAAeA,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}